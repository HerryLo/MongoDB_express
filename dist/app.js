'use strict';

var express = require('express');
var path = require('path');
var favicon = require('serve-favicon');
var logger = require('morgan');
var cookieParser = require('cookie-parser');
var bodyParser = require('body-parser');

var index = require('./routes/index');
var movie = require('./routes/movie');
var artList = require('./routes/article/artList');
var users = require('./routes/user/users');
var fetchImg = require('./routes/other/fetchImg');
var register = require('./routes/user/register');
var login = require('./routes/user/login');

var app = express();

// app.set('views', path.join(__dirname, 'views'));
// app.set('view engine', 'jade');
// uncomment after placing your favicon in /public
// app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));
app.use(logger('dev'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({
    extended: false
}));
app.use(cookieParser('secret'));
app.use(express.static(path.join(__dirname, 'public')));

app.all('*', function (req, res, next) {
    res.header("Access-Control-Allow-Origin", "*");
    res.header("Access-Control-Allow-Headers", "X-Requested-With");
    res.header("Access-Control-Allow-Methods", "PUT,POST,GET,DELETE,OPTIONS");
    next();
});

/* get cookies */

// app.use('/', index);
// app.use('/users', users);
app.use('/api/movie', movie);
app.use('/api/artlist', artList);
app.use('/api/fetchImg', fetchImg);
app.use('/api/register', register);
app.use('/api/login', login);

app.use(function (req, res, next) {
    var err = new Error('Not Found');
    err.status = 404;
    next(err);
});

app.use(function (err, req, res, next) {
    res.locals.message = err.message;
    res.locals.error = req.app.get('env') === 'development' ? err : {};
    res.status(err.status || 500);
    res.render('error');
});

module.exports = app;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHAuanMiXSwibmFtZXMiOlsiZXhwcmVzcyIsInJlcXVpcmUiLCJwYXRoIiwiZmF2aWNvbiIsImxvZ2dlciIsImNvb2tpZVBhcnNlciIsImJvZHlQYXJzZXIiLCJpbmRleCIsIm1vdmllIiwiYXJ0TGlzdCIsInVzZXJzIiwiZmV0Y2hJbWciLCJyZWdpc3RlciIsImxvZ2luIiwiYXBwIiwidXNlIiwianNvbiIsInVybGVuY29kZWQiLCJleHRlbmRlZCIsInN0YXRpYyIsImpvaW4iLCJfX2Rpcm5hbWUiLCJhbGwiLCJyZXEiLCJyZXMiLCJuZXh0IiwiaGVhZGVyIiwiZXJyIiwiRXJyb3IiLCJzdGF0dXMiLCJsb2NhbHMiLCJtZXNzYWdlIiwiZXJyb3IiLCJnZXQiLCJyZW5kZXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLFVBQVVDLFFBQVEsU0FBUixDQUFkO0FBQ0EsSUFBSUMsT0FBT0QsUUFBUSxNQUFSLENBQVg7QUFDQSxJQUFJRSxVQUFVRixRQUFRLGVBQVIsQ0FBZDtBQUNBLElBQUlHLFNBQVNILFFBQVEsUUFBUixDQUFiO0FBQ0EsSUFBSUksZUFBZUosUUFBUSxlQUFSLENBQW5CO0FBQ0EsSUFBSUssYUFBYUwsUUFBUSxhQUFSLENBQWpCOztBQUdBLElBQUlNLFFBQVFOLFFBQVEsZ0JBQVIsQ0FBWjtBQUNBLElBQUlPLFFBQVFQLFFBQVEsZ0JBQVIsQ0FBWjtBQUNBLElBQUlRLFVBQVVSLFFBQVEsMEJBQVIsQ0FBZDtBQUNBLElBQUlTLFFBQVFULFFBQVEscUJBQVIsQ0FBWjtBQUNBLElBQUlVLFdBQVdWLFFBQVEseUJBQVIsQ0FBZjtBQUNBLElBQUlXLFdBQVdYLFFBQVEsd0JBQVIsQ0FBZjtBQUNBLElBQUlZLFFBQVFaLFFBQVEscUJBQVIsQ0FBWjs7QUFFQSxJQUFJYSxNQUFNZCxTQUFWOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FjLElBQUlDLEdBQUosQ0FBUVgsT0FBTyxLQUFQLENBQVI7QUFDQVUsSUFBSUMsR0FBSixDQUFRVCxXQUFXVSxJQUFYLEVBQVI7QUFDQUYsSUFBSUMsR0FBSixDQUFRVCxXQUFXVyxVQUFYLENBQXNCO0FBQzFCQyxjQUFVO0FBRGdCLENBQXRCLENBQVI7QUFHQUosSUFBSUMsR0FBSixDQUFRVixhQUFhLFFBQWIsQ0FBUjtBQUNBUyxJQUFJQyxHQUFKLENBQVFmLFFBQVFtQixNQUFSLENBQWVqQixLQUFLa0IsSUFBTCxDQUFVQyxTQUFWLEVBQXFCLFFBQXJCLENBQWYsQ0FBUjs7QUFFQVAsSUFBSVEsR0FBSixDQUFRLEdBQVIsRUFBYSxVQUFVQyxHQUFWLEVBQWVDLEdBQWYsRUFBb0JDLElBQXBCLEVBQTBCO0FBQ25DRCxRQUFJRSxNQUFKLENBQVcsNkJBQVgsRUFBMEMsR0FBMUM7QUFDQUYsUUFBSUUsTUFBSixDQUFXLDhCQUFYLEVBQTJDLGtCQUEzQztBQUNBRixRQUFJRSxNQUFKLENBQVcsOEJBQVgsRUFBMkMsNkJBQTNDO0FBQ0FEO0FBQ0gsQ0FMRDs7QUFPQTs7QUFFQTtBQUNBO0FBQ0FYLElBQUlDLEdBQUosQ0FBUSxZQUFSLEVBQXNCUCxLQUF0QjtBQUNBTSxJQUFJQyxHQUFKLENBQVEsY0FBUixFQUF3Qk4sT0FBeEI7QUFDQUssSUFBSUMsR0FBSixDQUFRLGVBQVIsRUFBeUJKLFFBQXpCO0FBQ0FHLElBQUlDLEdBQUosQ0FBUSxlQUFSLEVBQXlCSCxRQUF6QjtBQUNBRSxJQUFJQyxHQUFKLENBQVEsWUFBUixFQUFzQkYsS0FBdEI7O0FBRUFDLElBQUlDLEdBQUosQ0FBUSxVQUFVUSxHQUFWLEVBQWVDLEdBQWYsRUFBb0JDLElBQXBCLEVBQTBCO0FBQzlCLFFBQUlFLE1BQU0sSUFBSUMsS0FBSixDQUFVLFdBQVYsQ0FBVjtBQUNBRCxRQUFJRSxNQUFKLEdBQWEsR0FBYjtBQUNBSixTQUFLRSxHQUFMO0FBQ0gsQ0FKRDs7QUFNQWIsSUFBSUMsR0FBSixDQUFRLFVBQVVZLEdBQVYsRUFBZUosR0FBZixFQUFvQkMsR0FBcEIsRUFBeUJDLElBQXpCLEVBQStCO0FBQ25DRCxRQUFJTSxNQUFKLENBQVdDLE9BQVgsR0FBcUJKLElBQUlJLE9BQXpCO0FBQ0FQLFFBQUlNLE1BQUosQ0FBV0UsS0FBWCxHQUFtQlQsSUFBSVQsR0FBSixDQUFRbUIsR0FBUixDQUFZLEtBQVosTUFBdUIsYUFBdkIsR0FBdUNOLEdBQXZDLEdBQTZDLEVBQWhFO0FBQ0FILFFBQUlLLE1BQUosQ0FBV0YsSUFBSUUsTUFBSixJQUFjLEdBQXpCO0FBQ0FMLFFBQUlVLE1BQUosQ0FBVyxPQUFYO0FBQ0gsQ0FMRDs7QUFPQUMsT0FBT0MsT0FBUCxHQUFpQnRCLEdBQWpCIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xudmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG52YXIgZmF2aWNvbiA9IHJlcXVpcmUoJ3NlcnZlLWZhdmljb24nKTtcbnZhciBsb2dnZXIgPSByZXF1aXJlKCdtb3JnYW4nKTtcbnZhciBjb29raWVQYXJzZXIgPSByZXF1aXJlKCdjb29raWUtcGFyc2VyJyk7XG52YXIgYm9keVBhcnNlciA9IHJlcXVpcmUoJ2JvZHktcGFyc2VyJyk7XG5cblxudmFyIGluZGV4ID0gcmVxdWlyZSgnLi9yb3V0ZXMvaW5kZXgnKTtcbnZhciBtb3ZpZSA9IHJlcXVpcmUoJy4vcm91dGVzL21vdmllJyk7XG52YXIgYXJ0TGlzdCA9IHJlcXVpcmUoJy4vcm91dGVzL2FydGljbGUvYXJ0TGlzdCcpO1xudmFyIHVzZXJzID0gcmVxdWlyZSgnLi9yb3V0ZXMvdXNlci91c2VycycpO1xudmFyIGZldGNoSW1nID0gcmVxdWlyZSgnLi9yb3V0ZXMvb3RoZXIvZmV0Y2hJbWcnKTtcbnZhciByZWdpc3RlciA9IHJlcXVpcmUoJy4vcm91dGVzL3VzZXIvcmVnaXN0ZXInKTtcbnZhciBsb2dpbiA9IHJlcXVpcmUoJy4vcm91dGVzL3VzZXIvbG9naW4nKTtcblxudmFyIGFwcCA9IGV4cHJlc3MoKTtcblxuLy8gYXBwLnNldCgndmlld3MnLCBwYXRoLmpvaW4oX19kaXJuYW1lLCAndmlld3MnKSk7XG4vLyBhcHAuc2V0KCd2aWV3IGVuZ2luZScsICdqYWRlJyk7XG4vLyB1bmNvbW1lbnQgYWZ0ZXIgcGxhY2luZyB5b3VyIGZhdmljb24gaW4gL3B1YmxpY1xuLy8gYXBwLnVzZShmYXZpY29uKHBhdGguam9pbihfX2Rpcm5hbWUsICdwdWJsaWMnLCAnZmF2aWNvbi5pY28nKSkpO1xuYXBwLnVzZShsb2dnZXIoJ2RldicpKTtcbmFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpO1xuYXBwLnVzZShib2R5UGFyc2VyLnVybGVuY29kZWQoe1xuICAgIGV4dGVuZGVkOiBmYWxzZVxufSkpO1xuYXBwLnVzZShjb29raWVQYXJzZXIoJ3NlY3JldCcpKTtcbmFwcC51c2UoZXhwcmVzcy5zdGF0aWMocGF0aC5qb2luKF9fZGlybmFtZSwgJ3B1YmxpYycpKSk7XG5cbmFwcC5hbGwoJyonLCBmdW5jdGlvbiAocmVxLCByZXMsIG5leHQpIHtcbiAgICByZXMuaGVhZGVyKFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luXCIsIFwiKlwiKTtcbiAgICByZXMuaGVhZGVyKFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVyc1wiLCBcIlgtUmVxdWVzdGVkLVdpdGhcIik7XG4gICAgcmVzLmhlYWRlcihcIkFjY2Vzcy1Db250cm9sLUFsbG93LU1ldGhvZHNcIiwgXCJQVVQsUE9TVCxHRVQsREVMRVRFLE9QVElPTlNcIik7XG4gICAgbmV4dCgpO1xufSk7XG5cbi8qIGdldCBjb29raWVzICovXG5cbi8vIGFwcC51c2UoJy8nLCBpbmRleCk7XG4vLyBhcHAudXNlKCcvdXNlcnMnLCB1c2Vycyk7XG5hcHAudXNlKCcvYXBpL21vdmllJywgbW92aWUpO1xuYXBwLnVzZSgnL2FwaS9hcnRsaXN0JywgYXJ0TGlzdCk7XG5hcHAudXNlKCcvYXBpL2ZldGNoSW1nJywgZmV0Y2hJbWcpO1xuYXBwLnVzZSgnL2FwaS9yZWdpc3RlcicsIHJlZ2lzdGVyKTtcbmFwcC51c2UoJy9hcGkvbG9naW4nLCBsb2dpbik7XG5cbmFwcC51c2UoZnVuY3Rpb24gKHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcignTm90IEZvdW5kJyk7XG4gICAgZXJyLnN0YXR1cyA9IDQwNDtcbiAgICBuZXh0KGVycik7XG59KTtcblxuYXBwLnVzZShmdW5jdGlvbiAoZXJyLCByZXEsIHJlcywgbmV4dCkge1xuICAgIHJlcy5sb2NhbHMubWVzc2FnZSA9IGVyci5tZXNzYWdlO1xuICAgIHJlcy5sb2NhbHMuZXJyb3IgPSByZXEuYXBwLmdldCgnZW52JykgPT09ICdkZXZlbG9wbWVudCcgPyBlcnIgOiB7fTtcbiAgICByZXMuc3RhdHVzKGVyci5zdGF0dXMgfHwgNTAwKTtcbiAgICByZXMucmVuZGVyKCdlcnJvcicpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXBwOyJdfQ==