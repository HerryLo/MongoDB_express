{"version":3,"sources":["../../bin/www"],"names":["app","require","debug","http","dbConnect","server","createServer","port","normalizePort","process","env","PORT","connect","set","listen","on","onError","onListening","val","parseInt","isNaN","error","syscall","bind","code","console","exit","addr","address"],"mappings":";;AAEA,IAAIA,MAAMC,QAAQ,QAAR,CAAV;AACA,IAAIC,QAAQD,QAAQ,OAAR,EAAiB,wBAAjB,CAAZ;AACA,IAAIE,OAAOF,QAAQ,MAAR,CAAX;AACA,IAAIG,YAAYH,QAAQ,uBAAR,CAAhB;AACA,IAAII,SAASF,KAAKG,YAAL,CAAkBN,GAAlB,CAAb;AACA,IAAIO,OAAOC,cAAcC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,MAAlC,CAAX;;AAEAP,UAAUQ,OAAV;;AAEAZ,IAAIa,GAAJ,CAAQ,MAAR,EAAgBN,IAAhB;AACAF,OAAOS,MAAP,CAAcP,IAAd;AACAF,OAAOU,EAAP,CAAU,OAAV,EAAmBC,OAAnB;AACAX,OAAOU,EAAP,CAAU,WAAV,EAAuBE,WAAvB;;AAEA,SAAST,aAAT,CAAuBU,GAAvB,EAA4B;AAC1B,MAAIX,OAAOY,SAASD,GAAT,EAAc,EAAd,CAAX;;AAEA,MAAIE,MAAMb,IAAN,CAAJ,EAAiB;AACf,WAAOW,GAAP;AACD;AACD,MAAIX,QAAQ,CAAZ,EAAe;AACb,WAAOA,IAAP;AACD;;AAED,SAAO,KAAP;AACD;;AAED,SAASS,OAAT,CAAiBK,KAAjB,EAAwB;AACtB,MAAIA,MAAMC,OAAN,KAAkB,QAAtB,EAAgC;AAC9B,UAAMD,KAAN;AACD;;AAED,MAAIE,OAAO,OAAOhB,IAAP,KAAgB,QAAhB,GACP,UAAUA,IADH,GAEP,UAAUA,IAFd;AAGA;AACA,UAAQc,MAAMG,IAAd;AACE,SAAK,QAAL;AACEC,cAAQJ,KAAR,CAAcE,OAAO,+BAArB;AACAd,cAAQiB,IAAR,CAAa,CAAb;AACA;AACF,SAAK,YAAL;AACED,cAAQJ,KAAR,CAAcE,OAAO,oBAArB;AACAd,cAAQiB,IAAR,CAAa,CAAb;AACA;AACF;AACE,YAAML,KAAN;AAVJ;AAYD;;AAED,SAASJ,WAAT,GAAuB;AACrB,MAAIU,OAAOtB,OAAOuB,OAAP,EAAX;AACA,MAAIL,OAAO,OAAOI,IAAP,KAAgB,QAAhB,GACT,UAAUA,IADD,GAET,UAAUA,KAAKpB,IAFjB;AAGAL,QAAM,kBAAkBqB,IAAxB;AACD","file":"www.js","sourcesContent":["\r\n\r\nvar app = require('../app');\r\nvar debug = require('debug')('mongodb-express:server');\r\nvar http = require('http');\r\nvar dbConnect = require('../mongoose/dbConnect')\r\nvar server = http.createServer(app);\r\nvar port = normalizePort(process.env.PORT || '3222');\r\n\r\ndbConnect.connect();\r\n\r\napp.set('port', port);\r\nserver.listen(port);\r\nserver.on('error', onError);\r\nserver.on('listening', onListening);\r\n\r\nfunction normalizePort(val) {\r\n  var port = parseInt(val, 10);\r\n\r\n  if (isNaN(port)) {\r\n    return val;\r\n  }\r\n  if (port >= 0) {\r\n    return port;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction onError(error) {\r\n  if (error.syscall !== 'listen') {\r\n    throw error;\r\n  }\r\n\r\n  var bind = typeof port === 'string'\r\n    ? 'Pipe ' + port\r\n    : 'Port ' + port;\r\n  // handle specific listen errors with friendly messages\r\n  switch (error.code) {\r\n    case 'EACCES':\r\n      console.error(bind + ' requires elevated privileges');\r\n      process.exit(1);\r\n      break;\r\n    case 'EADDRINUSE':\r\n      console.error(bind + ' is already in use');\r\n      process.exit(1);\r\n      break;\r\n    default:\r\n      throw error;\r\n  }\r\n}\r\n\r\nfunction onListening() {\r\n  var addr = server.address();\r\n  var bind = typeof addr === 'string' ?\r\n    'pipe ' + addr :\r\n    'port ' + addr.port;\r\n  debug('Listening on ' + bind);\r\n}"]}