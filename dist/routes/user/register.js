'use strict';

var express = require('express');
var router = express.Router();
var UserModel = require('../../model/UserModel');

var _require = require('../../utils/constant'),
    Desregister = _require.Desregister;

router.get('/', function (req, res, next) {
    var user = req.query.user;
    var password = req.query.password;
    if (user && password) {
        UserModel.findUser({
            user: user
        }).then(function (result) {
            if (result.length > 0) {
                res.send({ data: [], code: 1, desc: Desregister.exist });
            } else {
                var data = {
                    user: user,
                    password: password,
                    time: JSON.stringify(new Date())
                };
                UserModel.createUser(data).then(function (result) {
                    res.send({ data: result, code: 1, desc: Desregister.success });
                }).catch(function (err) {
                    console.log(err);
                });
            }
        }).catch(function (err) {
            console.log(err);
        });
    } else {
        res.send({ data: [], code: 1, desc: Desregister.hint });
    }
});

module.exports = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvdXNlci9yZWdpc3Rlci5qcyJdLCJuYW1lcyI6WyJleHByZXNzIiwicmVxdWlyZSIsInJvdXRlciIsIlJvdXRlciIsIlVzZXJNb2RlbCIsIkRlc3JlZ2lzdGVyIiwiZ2V0IiwicmVxIiwicmVzIiwibmV4dCIsInVzZXIiLCJxdWVyeSIsInBhc3N3b3JkIiwiZmluZFVzZXIiLCJ0aGVuIiwicmVzdWx0IiwibGVuZ3RoIiwic2VuZCIsImRhdGEiLCJjb2RlIiwiZGVzYyIsImV4aXN0IiwidGltZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJEYXRlIiwiY3JlYXRlVXNlciIsInN1Y2Nlc3MiLCJjYXRjaCIsImVyciIsImNvbnNvbGUiLCJsb2ciLCJoaW50IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFNQSxVQUFVQyxRQUFRLFNBQVIsQ0FBaEI7QUFDQSxJQUFNQyxTQUFTRixRQUFRRyxNQUFSLEVBQWY7QUFDQSxJQUFNQyxZQUFZSCxRQUFRLHVCQUFSLENBQWxCOztlQUNzQkEsUUFBUSxzQkFBUixDO0lBQWZJLFcsWUFBQUEsVzs7QUFFUEgsT0FBT0ksR0FBUCxDQUFXLEdBQVgsRUFBZ0IsVUFBQ0MsR0FBRCxFQUFNQyxHQUFOLEVBQVdDLElBQVgsRUFBb0I7QUFDaEMsUUFBTUMsT0FBT0gsSUFBSUksS0FBSixDQUFVRCxJQUF2QjtBQUNBLFFBQU1FLFdBQVdMLElBQUlJLEtBQUosQ0FBVUMsUUFBM0I7QUFDQSxRQUFJRixRQUFRRSxRQUFaLEVBQXNCO0FBQ2xCUixrQkFBVVMsUUFBVixDQUFtQjtBQUNmSCxrQkFBTUE7QUFEUyxTQUFuQixFQUVHSSxJQUZILENBRVEsVUFBVUMsTUFBVixFQUFrQjtBQUN0QixnQkFBSUEsT0FBT0MsTUFBUCxHQUFnQixDQUFwQixFQUF1QjtBQUNuQlIsb0JBQUlTLElBQUosQ0FBUyxFQUFDQyxNQUFNLEVBQVAsRUFBV0MsTUFBTSxDQUFqQixFQUFvQkMsTUFBTWYsWUFBWWdCLEtBQXRDLEVBQVQ7QUFDSCxhQUZELE1BRU87QUFDSCxvQkFBTUgsT0FBTztBQUNUUiwwQkFBTUEsSUFERztBQUVURSw4QkFBVUEsUUFGRDtBQUdUVSwwQkFBTUMsS0FBS0MsU0FBTCxDQUFlLElBQUlDLElBQUosRUFBZjtBQUhHLGlCQUFiO0FBS0FyQiwwQkFBVXNCLFVBQVYsQ0FBcUJSLElBQXJCLEVBQ0tKLElBREwsQ0FDVSxVQUFVQyxNQUFWLEVBQWtCO0FBQ3BCUCx3QkFBSVMsSUFBSixDQUFTLEVBQUNDLE1BQU1ILE1BQVAsRUFBZUksTUFBTSxDQUFyQixFQUF3QkMsTUFBTWYsWUFBWXNCLE9BQTFDLEVBQVQ7QUFDSCxpQkFITCxFQUdPQyxLQUhQLENBR2EsVUFBQ0MsR0FBRCxFQUFTO0FBQ2xCQyw0QkFBUUMsR0FBUixDQUFZRixHQUFaO0FBQ0gsaUJBTEQ7QUFNSDtBQUNKLFNBbEJELEVBa0JHRCxLQWxCSCxDQWtCUyxVQUFDQyxHQUFELEVBQVM7QUFDZEMsb0JBQVFDLEdBQVIsQ0FBWUYsR0FBWjtBQUNILFNBcEJEO0FBcUJILEtBdEJELE1Bc0JPO0FBQ0hyQixZQUFJUyxJQUFKLENBQVMsRUFBQ0MsTUFBTSxFQUFQLEVBQVdDLE1BQU0sQ0FBakIsRUFBb0JDLE1BQU1mLFlBQVkyQixJQUF0QyxFQUFUO0FBQ0g7QUFDSixDQTVCRDs7QUE4QkFDLE9BQU9DLE9BQVAsR0FBaUJoQyxNQUFqQiIsImZpbGUiOiJyZWdpc3Rlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJyk7XG5jb25zdCByb3V0ZXIgPSBleHByZXNzLlJvdXRlcigpO1xuY29uc3QgVXNlck1vZGVsID0gcmVxdWlyZSgnLi4vLi4vbW9kZWwvVXNlck1vZGVsJylcbmNvbnN0IHtEZXNyZWdpc3Rlcn0gPSByZXF1aXJlKCcuLi8uLi91dGlscy9jb25zdGFudCcpXG5cbnJvdXRlci5nZXQoJy8nLCAocmVxLCByZXMsIG5leHQpID0+IHtcbiAgICBjb25zdCB1c2VyID0gcmVxLnF1ZXJ5LnVzZXI7XG4gICAgY29uc3QgcGFzc3dvcmQgPSByZXEucXVlcnkucGFzc3dvcmQ7XG4gICAgaWYgKHVzZXIgJiYgcGFzc3dvcmQpIHtcbiAgICAgICAgVXNlck1vZGVsLmZpbmRVc2VyKHtcbiAgICAgICAgICAgIHVzZXI6IHVzZXJcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICByZXMuc2VuZCh7ZGF0YTogW10sIGNvZGU6IDEsIGRlc2M6IERlc3JlZ2lzdGVyLmV4aXN0fSlcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgdXNlcjogdXNlcixcbiAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmQ6IHBhc3N3b3JkLFxuICAgICAgICAgICAgICAgICAgICB0aW1lOiBKU09OLnN0cmluZ2lmeShuZXcgRGF0ZSgpKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBVc2VyTW9kZWwuY3JlYXRlVXNlcihkYXRhKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXMuc2VuZCh7ZGF0YTogcmVzdWx0LCBjb2RlOiAxLCBkZXNjOiBEZXNyZWdpc3Rlci5zdWNjZXNzfSlcbiAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKVxuICAgICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHJlcy5zZW5kKHtkYXRhOiBbXSwgY29kZTogMSwgZGVzYzogRGVzcmVnaXN0ZXIuaGludH0pXG4gICAgfVxufSlcblxubW9kdWxlLmV4cG9ydHMgPSByb3V0ZXI7Il19